const fs = require('fs');
const path = require('path');
const puppeteer = require('puppeteer');

let isBrowserClosing = false;

async function checkProxy(proxyObj) {
    // Hàm kiểm tra proxy (giả lập - cần thay thế bằng hàm thực tế)
    console.log(`Đang kiểm tra proxy: ${JSON.stringify(proxyObj)}`);
    return true; // Trả về true nếu proxy hợp lệ
}

function readProfilesFromFile() {
    // Hàm đọc danh sách profile và proxy từ file
    return [
        { folderName: 'profile1', proxy: 'http://username:password@proxyhost:8080' },
        { folderName: 'profile2', proxy: 'http://username:password@proxyhost:8080' }
    ];
}

async function run() {
    // Đọc danh sách profile và proxy từ file
    const profiles = readProfilesFromFile();

    for (const { folderName, proxy } of profiles) {
        try {
            if (isBrowserClosing) {
                console.log('Đã phát hiện trình duyệt đang đóng, dừng việc khởi động lại.');
                break; // Dừng vòng lặp
            }

            // Kiểm tra proxy trước khi khởi động Puppeteer
            const proxyParts = proxy.match(/^http:\/\/([^:]+):([^@]+)@([^:]+):(\d+)$/);
            if (!proxyParts) throw new Error(`Proxy "${proxy}" không hợp lệ.`);

            const proxyHost = proxyParts[3];
            const proxyPort = parseInt(proxyParts[4], 10);
            const proxyUsername = proxyParts[1];
            const proxyPassword = proxyParts[2];

            const proxyObj = { host: proxyHost, port: proxyPort, username: proxyUsername, password: proxyPassword };

            // Kiểm tra tính hợp lệ của proxy
            const isProxyValid = await checkProxy(proxyObj);
            if (!isProxyValid) {
                console.error(`Proxy "${proxy}" không hợp lệ, không thể tiếp tục.`);
                continue; // Bỏ qua profile này nếu proxy không hợp lệ
            }

            // Tạo thư mục cho profile nếu chưa tồn tại
            const userDataPath = path.join(__dirname, 'profiles', folderName);
            if (!fs.existsSync(userDataPath)) {
                fs.mkdirSync(userDataPath, { recursive: true });
            }

            console.log(`Sử dụng profile: ${folderName} với proxy: ${proxy}`);
            const browser = await puppeteer.launch({
                headless: false,
                args: [
                    `--proxy-server=http://${proxyHost}:${proxyPort}`,
                    '--start-maximized',
                    '--disable-notifications',
                    '--disable-extensions',
                    `--user-data-dir=${userDataPath}`
                ]
            });

            const page = await browser.newPage();

            // Thiết lập xác thực proxy
            await page.authenticate({
                username: proxyUsername,
                password: proxyPassword
            });

            // Lắng nghe sự kiện reload hoặc điều hướng
            page.on('domcontentloaded', async () => {
                console.log('Trang đã được tải lại!');
                // Thực hiện hiển thị lại label ngay sau khi DOM được tải xong
                await page.evaluate((folderName) => {
                    // Xóa label cũ (nếu có) để tránh bị chồng lặp
                    const existingLabel = document.querySelector('#profile-label');
                    if (existingLabel) {
                        existingLabel.remove();
                    }

                    // Tạo lại label mới
                    const profileLabel = document.createElement('div');
                    profileLabel.id = 'profile-label';
                    profileLabel.style.position = 'fixed';
                    profileLabel.style.top = '100px';
                    profileLabel.style.right = '10px';
                    profileLabel.style.padding = '10px';
                    profileLabel.style.backgroundColor = '#fff';
                    profileLabel.style.color = '#000';
                    profileLabel.style.border = '1px solid #ccc';
                    profileLabel.style.fontSize = '16px';
                    profileLabel.style.fontWeight = 'bold';
                    profileLabel.textContent = `Profile: ${folderName}`;
                    profileLabel.style.zIndex = '9999';
                    document.body.appendChild(profileLabel);
                }, folderName);
            });

            await page.goto('https://web.telegram.org/a/#7413313712');

            // Thêm phần hiển thị FolderName trên góc của trình duyệt
            await page.evaluate((folderName) => {
                const profileLabel = document.createElement('div');
                profileLabel.id = 'profile-label';
                profileLabel.style.position = 'fixed';
                profileLabel.style.top = '100px';
                profileLabel.style.right = '10px';
                profileLabel.style.padding = '10px';
                profileLabel.style.backgroundColor = '#fff';
                profileLabel.style.color = '#000';
                profileLabel.style.border = '1px solid #ccc';
                profileLabel.style.fontSize = '16px';
                profileLabel.style.fontWeight = 'bold';
                profileLabel.textContent = `Profile: ${folderName}`;
                profileLabel.style.zIndex = '9999';
                document.body.appendChild(profileLabel);
            }, folderName);

            isBrowserClosing = false; // Đánh dấu trình duyệt đang chạy

            // Chờ người dùng đóng trình duyệt
            await new Promise((resolve) => browser.on('disconnected', () => {
                console.log(`Trình duyệt bị đóng ngoài ý muốn cho profile "${folderName}"!`);
                isBrowserClosing = true; // Đánh dấu trình duyệt đã bị đóng
                resolve();
            }));

        } catch (err) {
            console.error(`Lỗi khi chạy profile "${folderName}":`, err);
        }
    }

    console.log('Hoàn thành tất cả profile.');
}

run().catch(err => console.error('Đã xảy ra lỗi trong quá trình thực thi:', err));
