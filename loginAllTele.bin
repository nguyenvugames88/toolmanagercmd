const puppeteer = require('puppeteer');
const path = require('path');
const fs = require('fs');
const { HttpsProxyAgent } = require('https-proxy-agent');
const axios = require('axios');
const robot = require('robotjs');
const WebSocket = require('ws');

const wss = new WebSocket.Server({ port: 8080 });

let proxies;
let profiles = [];
let processedProfiles = new Set(); // Danh sách các profile đã xử lý
let masterBrowser = null; // Trình duyệt chính
let slaveBrowsers = []; // Danh sách trình duyệt phụ
let isCleaningUp = false; // Trạng thái dọn dẹp
let isShuttingDown = false; // Trạng thái tắt ứng dụng
let maxThreads;
const resolution = robot.getScreenSize();
const windowWidth = 500;
const windowHeight = 600;
let positionX = 0;
let positionY = 0;
let activeSlaveBrowsersCount = 0;

// Đọc dữ liệu từ file
const readProfilesFromFile = () => {
  const filePath = path.join(__dirname, 'SelectedAllProfiles.txt');
  if (!fs.existsSync(filePath)) {
    console.error('File SelectedAllProfiles.txt không tồn tại.');
    process.exit(1);
  }
  return fs.readFileSync(filePath, 'utf-8').split('\n')
    .map(line => line.trim())
    .filter(Boolean)
    .map(line => {
      const parts = line.split('|');
      if (parts.length < 2) {
        console.error(`Dòng không hợp lệ: "${line}"`);
        return null;
      }
      return { folderName: parts[0], proxy: parts[1] };
    })
    .filter(Boolean);
};

const readThreadCount = async () => {
  const filePath = path.join(__dirname, 'Theard.txt');
  await waitForFile(filePath);
  const threadCount = parseInt(fs.readFileSync(filePath, 'utf-8').trim(), 10);
  if (isNaN(threadCount) || threadCount <= 0) {
    console.error('Giá trị ThreadCount không hợp lệ.');
    process.exit(1);
  }
  return threadCount;
};

const waitForFile = (filePath) => {
  return new Promise((resolve, reject) => {
    if (fs.existsSync(filePath)) {
      return resolve();
    }
    const watcher = fs.watch(path.dirname(filePath), (eventType, filename) => {
      if (filename === path.basename(filePath) && eventType === 'rename') {
        watcher.close();
        resolve();
      }
    });
    setTimeout(() => {
      watcher.close();
      reject(new Error(`File không xuất hiện sau thời gian chờ: ${filePath}`));
    }, 10000); // Timeout sau 10 giây
  });
};

const readProxiesFromFile = () => {
  const filePath = path.join(__dirname, 'proxy.txt');
  if (!fs.existsSync(filePath)) {
    console.error('File proxy.txt không tồn tại.');
    process.exit(1);
  }
  return fs.readFileSync(filePath, 'utf-8').split('\n')
    .map(line => line.trim())
    .filter(Boolean)
    .map(proxy => {
      const regex = /^http:\/\/([^:]+):([^@]+)@([^:]+):(\d+)$/;
      const match = proxy.match(regex);
      if (!match) {
        console.error(`Proxy không hợp lệ: "${proxy}"`);
        return null;
      }
      const [, username, password, host, port] = match;
      return { username, password, host, port };
    })
    .filter(Boolean);
};

const cleanup = async () => {
    if (isCleaningUp) {
        console.log('Đang dọn dẹp, vui lòng chờ...');
        return;
    }
    isCleaningUp = true;
    console.log('Nhận tín hiệu đóng, đang thực hiện dọn dẹp...');
    
    try {
        // Đóng trình duyệt chính nếu còn mở
        if (masterBrowser && masterBrowser.isConnected()) {
            console.log('Đang đóng trình duyệt chính...');
            await masterBrowser.close(); // Đảm bảo trình duyệt chính được đóng
        }

        // Đóng tất cả trình duyệt phụ
        for (let i = 0; i < slaveBrowsers.length; i++) {
            const slave = slaveBrowsers[i];
            if (slave.isConnected()) {
                console.log(`Đang đóng trình duyệt phụ PID ${slave.process().pid}...`);
                await slave.close(); // Đảm bảo mỗi trình duyệt phụ được đóng
            } else {
                console.log(`Trình duyệt phụ PID ${slave.process().pid} đã đóng trước đó.`);
            }
        }
        // Lọc các profile chưa xử lý
        const remainingProfiles = profiles.filter(profile => !processedProfiles.has(profile.folderName));

        // Nếu không còn profile nào chưa xử lý, dừng lại
        if (remainingProfiles.length === 0) {
            console.log('Tất cả các profile đã được xử lý.');
            process.exit(0); 
        }
        // Reset lại thông tin sau khi đóng tất cả
        slaveBrowsers.length = 0;
        activeSlaveBrowsersCount = 0;

        console.log('Đã đóng tất cả trình duyệt.');

        // Khởi động lại các profile còn lại nếu cần
        if (!isShuttingDown && profiles && profiles.length > 0) {
            console.log('Khởi động lại các profile còn lại...');
            await startProfiles(profiles, processedProfiles, slaveBrowsers, maxThreads, positionX, positionY, proxies); // Gọi lại để xử lý các profile còn lại
        } else {
            console.error('Không có profile nào để xử lý hoặc đang tắt ứng dụng.');
        }
    } catch (error) {
        console.error('Lỗi khi dọn dẹp:', error.message);
    } finally {
        isCleaningUp = false;
    }
};


// Xử lý khi trình duyệt chính bị đóng
if (masterBrowser) {
    masterBrowser.on('disconnected', async () => {
        console.log('Trình duyệt chính đã đóng, dọn dẹp các trình duyệt phụ...');
        await cleanup(); // Dọn dẹp toàn bộ trình duyệt

        // Kiểm tra lại sau khi dọn dẹp xong
        if (!isShuttingDown) {
            console.log('Khởi động lại các profile còn lại...');
            await startProfiles(profiles, processedProfiles, slaveBrowsers, maxThreads, positionX, positionY, proxies); // Gọi lại để xử lý các profile còn lại
        }
    });
}

// Xử lý tín hiệu thoát
process.on('SIGINT', async () => {
  console.log('Nhận tín hiệu Ctrl+C (SIGINT), đang tắt...');
  isShuttingDown = true;
  await cleanup();  // Chờ cleanup hoàn thành trước khi kết thúc
  process.exit(0);  // Kết thúc tiến trình sau khi dọn dẹp xong
});

process.on('SIGTERM', async () => {
  console.log('Nhận tín hiệu SIGTERM, đang tắt...');
  isShuttingDown = true;
  await cleanup();  // Chờ cleanup hoàn thành trước khi kết thúc
  process.exit(0);  // Kết thúc tiến trình sau khi dọn dẹp xong
});


// Xử lý và khởi động các profile
const startProfiles = async (profiles, processedProfiles, slaveBrowsers, maxThreads, positionX, positionY, proxies) => {
    // Kiểm tra nếu profiles không phải là undefined hoặc null
    if (isShuttingDown) {
        console.log('Đang trong quá trình tắt, không mở thêm profile mới.');
        return;
    }

    if (!profiles || profiles.length === 0) {
        console.error('Không có profile nào để xử lý.');
        return;
    }

    // Lọc các profile chưa xử lý
    const remainingProfiles = profiles.filter(profile => !processedProfiles.has(profile.folderName));

    // Nếu không còn profile nào chưa xử lý, dừng lại
    if (remainingProfiles.length === 0) {
        console.log('Tất cả các profile đã được xử lý.');
        return;
    }

    for (let i = 0; i < remainingProfiles.length; i++) {
        try {
            const profile = remainingProfiles[i];

            // Nếu profile đã được xử lý, bỏ qua
            if (processedProfiles.has(profile.folderName)) {
                console.log(`Profile ${profile.folderName} đã xử lý, bỏ qua.`);
                continue;
            }

            // Nếu đã đạt giới hạn maxThreads, dừng lại
            if (activeSlaveBrowsersCount >= maxThreads) {
                console.log('Đã đạt giới hạn số lượng trình duyệt phụ, dừng lại.');
                break;
            }

            const isMaster = i === 0;
            const currentX = positionX;
            const currentY = positionY;

            const result = await handleProfile(profile, currentX, currentY, isMaster, slaveBrowsers, proxies);

            if (result && isMaster) {
                masterBrowser = result.browser;

                masterBrowser.on('disconnected', async () => {
                    console.log('Trình duyệt chính đã đóng, dọn dẹp các trình duyệt phụ...');
                    await cleanup(); // Dọn dẹp toàn bộ trình duyệt

                    // Tiếp tục xử lý các profile còn lại
                    console.log('Khởi động lại các profile còn lại...');
                    if (!isShuttingDown) {
                        await startProfiles(profiles, processedProfiles, slaveBrowsers, maxThreads, positionX, positionY, proxies); // Gọi lại để xử lý các profile còn lại
                    }
                });
            }

            if (result) {
                slaveBrowsers.push(result.browser); // Thêm trình duyệt phụ vào mảng slaveBrowsers
                activeSlaveBrowsersCount++; // Tăng số lượng trình duyệt phụ
                processedProfiles.add(profile.folderName);
            }

            positionX += windowWidth;
            if (positionX + windowWidth > resolution.width * 4 / 3) {
                positionX = 0;
                positionY += windowHeight;
            }
        } catch (error) {
            console.error(`Lỗi xử lý profile ${remainingProfiles[i].folderName}:`, error.message);
        }
    }
};

// Chạy ứng dụng chính
const run = async () => {
  profiles = readProfilesFromFile();
  maxThreads = await readThreadCount();
  proxies = readProxiesFromFile();

  console.log(`Số luồng tối đa: ${maxThreads}`);
  await startProfiles(profiles, processedProfiles, slaveBrowsers, maxThreads, positionX, positionY, proxies);
};

run();

const handleProfile = async ({ folderName, proxy }, positionX, positionY, isMaster, slaves, proxies) => {
    let proxyParts = proxy.match(/^http:\/\/([^:]+):([^@]+)@([^:]+):(\d+)$/);
    if (!proxyParts) {
        console.error(`Proxy \"${proxy}\" không hợp lệ.`);
        return { browser: null, page: null, proxyHost: null };
    }

    let [_, proxyUsername, proxyPassword, proxyHost, proxyPort] = proxyParts;
    let proxyObj = { host: proxyHost, port: parseInt(proxyPort, 10), username: proxyUsername, password: proxyPassword };

    console.log(`Đang kiểm tra proxy: ${proxyHost}:${proxyPort}`);
    let isProxyValid = await checkProxy(proxyObj);

    if (!isProxyValid) {
        console.error(`[${folderName}] Proxy không hợp lệ. Đang chọn proxy khác...`);
        let retries = 3;
        while (retries > 0) {
            proxyObj = getRandomProxy(proxies);
            console.log(`Thử proxy mới: ${proxyObj.host}:${proxyObj.port}`);
            if (await checkProxy(proxyObj)) {
                console.log(`Proxy hợp lệ: ${proxyObj.host}:${proxyObj.port}`);
                proxyUsername = proxyObj.username;
                proxyPassword = proxyObj.password;
                proxyHost = proxyObj.host;
                proxyPort = proxyObj.port;
                break;
            }
            retries--;
        }

        if (retries === 0) {
            console.error(`[${folderName}] Không tìm được proxy hợp lệ.`);
            return { browser: null, page: null, proxyHost: null };
        }
    }

    const userDataPath = path.join(__dirname, 'profiles', folderName);
    if (!fs.existsSync(userDataPath)) {
        fs.mkdirSync(userDataPath, { recursive: true });
    }

    async function launchBrowser(options) {
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                reject(new Error('Timed out while launching browser'));
            }, 30000);

            puppeteer.launch(options).then(browser => {
                clearTimeout(timeout);
                resolve(browser);
            }).catch(err => {
                clearTimeout(timeout);
                reject(err);
            });
        });
    }

    async function retry(fn, retries = 3) {
        let lastError;
        for (let i = 0; i < retries; i++) {
            try {
                return await fn();
            } catch (error) {
                lastError = error;
                console.error(`[${folderName}] [${proxyHost}] Retry ${i + 1} failed: ${error.message}`);
                if (i === retries - 1) {
                    throw lastError;
                }
            }
        }
    }

    let browser;
    try {
        browser = await retry(() => launchBrowser({ 
            headless: false,
            args: [
                `--proxy-server=http://${proxyHost}:${proxyPort}`,
                `--user-data-dir=${userDataPath}`,
                '--disable-notifications',
                '--window-size=500,600',
                '--force-device-scale-factor=0.75',
                '--disable-session-crashed-bubble',
                '--mute-audio',
                '--no-sandbox', 
                '--disable-software-rasterizer',
                '--disable-dev-shm-usage', 
                '--disable-restore-session-state',
                `--window-position=${positionX},${positionY}`
            ],
            defaultViewport: null
        }), 3);
        
        const page = await browser.newPage();

        // Tải cookie từ file nếu tồn tại
        const cookiesPath = path.join(userDataPath, 'cookies.json');
        if (fs.existsSync(cookiesPath)) {
            const cookies = JSON.parse(fs.readFileSync(cookiesPath));
            await page.setCookie(...cookies);
            console.log(`[${folderName}] [${proxyHost}] Đã tải cookie từ file.`);
        }

        const cookies = await page.cookies();
        for (let cookie of cookies) {
            if (cookie.name === 'proxy-auth-cookie' || cookie.domain === 'proxy.example.com') {
                await page.deleteCookie(cookie);
            }
        }
        console.log(`[${folderName}] [${proxyHost}] Đã xóa các cookie liên quan đến xác thực proxy.`);

        if (proxyUsername && proxyPassword) {
            await page.authenticate({
                username: proxyUsername,
                password: proxyPassword
            });
            console.log(`[${folderName}] [${proxyHost}] Đã xác thực proxy: ${proxyUsername}@${proxyHost}`);
        }

        await page.goto('https://web.telegram.org/a', { waitUntil: 'load', timeout: 60000 });

        await page.evaluate((folderName) => {
            const profileLabel = document.createElement('div');
            profileLabel.style.position = 'fixed';
            profileLabel.style.top = '100px';
            profileLabel.style.right = '10px';
            profileLabel.style.padding = '10px';
            profileLabel.style.backgroundColor = '#fff';
            profileLabel.style.color = '#000';
            profileLabel.style.border = '1px solid #ccc';
            profileLabel.style.fontSize = '16px';
            profileLabel.style.fontWeight = 'bold';
            profileLabel.textContent = `Profile: ${folderName}`;
            profileLabel.style.zIndex = '9999';
            document.body.appendChild(profileLabel);
        }, folderName);

        console.log(`[${folderName}] [${proxyHost}] Xử lý thành công!`);

        // Lưu cookie sau khi xử lý
        const cookiesToKeep = await page.cookies();
        fs.writeFileSync(path.join(userDataPath, 'cookies.json'), JSON.stringify(cookiesToKeep));
        console.log(`[${folderName}] [${proxyHost}] Đã lưu cookie vào file.`);

        return { browser, page, proxyHost };

    } catch (error) {
        console.error(`[${folderName}] [${proxyHost}] Lỗi: ${error.message}`);
        return { browser: null, page: null, proxyHost };
    }
};

// Hàm kiểm tra proxy
const checkProxy = async (proxy) => {
    try {
        const agent = new HttpsProxyAgent(`http://${proxy.username}:${proxy.password}@${proxy.host}:${proxy.port}`);
        // Gửi một yêu cầu HTTP đơn giản để kiểm tra proxy
        const response = await axios.get('http://www.google.com', { httpsAgent: agent, timeout: 5000 });
        return response.status === 200; // Nếu trả về status 200 thì proxy hợp lệ
    } catch (error) {
        console.error(`Lỗi khi kiểm tra proxy ${proxy.host}:${proxy.port} - ${error.message}`);
        return false; // Nếu có lỗi thì proxy không hợp lệ
    }
};